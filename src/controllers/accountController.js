import { accountService } from '../services/accountService.js'
import dotenv from 'dotenv'
import jwt from 'jsonwebtoken';
import crypto from 'crypto'; // D√πng ƒë·ªÉ t·∫°o m√£ OTP ng·∫´u nhi√™n
import twilio from 'twilio'; // Th√™m Twilio v√†o ƒë·ªÉ g·ª≠i SMS
import nodemailer from 'nodemailer';
import Account from "../models/Account.js";
import User from "../models/User.js";
dotenv.config()
const getAccounts = async (req, res) => {
  try {
    const accounts = await accountService.getAccounts()
    res.status(200).json({ success: true, data: accounts, message: 'L·∫•y danh s√°ch t√†i kho·∫£n th√†nh c√¥ng' })
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message })
  }
}

const getAccountById = async (req, res) => {
  try {
    const account = await accountService.getAccountById(req.params.id)
    if (!account) return res.status(404).json({ success: false, data: null, message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' })
    res.status(200).json({ success: true, data: account, message: 'L·∫•y t√†i kho·∫£n th√†nh c√¥ng' })
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message })
  }
}

const createAccount = async (req, res) => {
  try {
      const { email, password, displayName, hashtag } = req.body;

      console.log("üì© D·ªØ li·ªáu nh·∫≠n t·ª´ client:", { email, password, displayName, hashtag });

      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!email || !password || !displayName || !hashtag) {
          return res.status(400).json({ success: false, message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email, password, displayName, hashtag." });
      }

      // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingAccount = await Account.findOne({ email });
      if (existingAccount) {
          return res.status(400).json({ success: false, message: "Email ƒë√£ t·ªìn t·∫°i!" });
      }

      // T·∫°o Account m·ªõi
      const newAccount = new Account({
          email,
          phone: null, // Kh√¥ng c√≥ phone
          password, // N·∫øu mu·ªën hash th√¨ d√πng bcrypt
          role: "user",
      });

      await newAccount.save();

      // T·∫°o User m·ªõi li√™n k·∫øt v·ªõi Account
      const newUser = new User({
          account: newAccount._id,
          identification: null, // Kh√¥ng c√≥ th√¥ng tin ID
          displayName,
          hashtag,
          address: null, // Kh√¥ng c√≥ ƒë·ªãa ch·ªâ ban ƒë·∫ßu
          avt: [],
          aboutMe: "",
          hobbies: [],
          friends: [],
          articles: [],
          reels: [],
          pages: {
              _id: newAccount._id,
              createPages: [],
              followerPages: [],
          },
          saveAddress: [],
          trips: [],
          collections: [],
          groups: {
              _id: newAccount._id,
              createGroups: [],
              saveGroups: [],
          },
          follow: [],
      });

      await newUser.save();

      return res.status(201).json({ success: true, message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng!", account: newAccount, user: newUser });
  } catch (error) {
      console.error("‚ùå L·ªói t·∫°o t√†i kho·∫£n:", error);
      return res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

const updateAccountById = async (req, res) => {
  try {
    const updatedAccount = await accountService.updateAccountById(req.params.id, req.body)
    if (!updatedAccount) return res.status(404).json({ success: false, data: null, message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' })
    res.status(200).json({ success: true, data: updatedAccount, message: 'C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng' })
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message })
  }
}

const updateAllAccounts = async (req, res) => {
  try {
    const updatedAccounts = await accountService.updateAllAccounts(req.body)
    res.status(200).json({ success: true, data: updatedAccounts, message: 'C·∫≠p nh·∫≠t t·∫•t c·∫£ t√†i kho·∫£n th√†nh c√¥ng' })
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message })
  }
}

const deleteAccountById = async (req, res) => {
  try {
    const deletedAccount = await accountService.deleteAccountById(req.params.id)
    if (!deletedAccount) return res.status(404).json({ success: false, data: null, message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' })
    res.status(200).json({ success: true, data: null, message: 'X√≥a t√†i kho·∫£n th√†nh c√¥ng' })
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message })
  }
}
const loginAccount = async (req, res) => {
  try {
    const { email, password } = req.body
    if (!email || !password) {
      return res.status(400).json({ success: false, message: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u' })
    }

    const account = await accountService.getAccountByEmail(email)
    if (!account) {
      return res.status(401).json({ success: false, message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' })
    }

    const isPasswordValid = await accountService.comparePassword(password, account.password)
    if (!isPasswordValid) {
      return res.status(401).json({ success: false, message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' })
    }

    // T·∫°o token JWT
    const token = jwt.sign(
      { id: account.id, email: account.email, role: account.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' } // Token h·∫øt h·∫°n sau 7 ng√†y
    )

    res.status(200).json({
      success: true,
      data: { token, account },
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
    })
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message })
  }
}
const twilioClient = twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN);
// H√†m g·ª≠i OTP
const sendOtp = async (req, res) => {
  try {
    const { input } = req.body;
    
    if (!input) {
      return res.status(400).json({ success: false, message: "Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n." });
    }

    // Ki·ªÉm tra email h·ª£p l·ªá
    const isEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input);
    if (!isEmail) {
      return res.status(400).json({ success: false, message: "Email kh√¥ng h·ª£p l·ªá." });
    }

    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
    const account = await accountService.getAccountByEmail(input);
    if (!account) {
      return res.status(404).json({ success: false, message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng." });
    }

    // T·∫°o m√£ OTP ng·∫´u nhi√™n
    const otp = Math.floor(100000 + Math.random() * 900000); // 6 ch·ªØ s·ªë

    // C·∫•u h√¨nh transporter ƒë·ªÉ g·ª≠i email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER, // Email g·ª≠i ƒëi
        pass: process.env.EMAIL_PASS, // M·∫≠t kh·∫©u email
      },
    });

    // N·ªôi dung email
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: input,
      subject: "M√£ OTP X√°c Minh",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.`,
    };

    // G·ª≠i OTP qua email
    await transporter.sendMail(mailOptions);

    // L∆∞u OTP v√†o c∆° s·ªü d·ªØ li·ªáu ho·∫∑c Redis
    await accountService.storeOtp(input, otp);

    return res.status(200).json({
      success: true,
      message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.",
    });

  } catch (error) {
    console.error("L·ªói g·ª≠i OTP:", error);
    return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i." });
  }
};
const verifyOtp = async (req, res) => {
  try {
      const { input, otp } = req.body;
      // L·∫•y OTP ƒë√£ l∆∞u t·ª´ DB ho·∫∑c Redis
      const storedOtp = await accountService.getOtp(input);

      if (!storedOtp) {
          return res.status(400).json({ success: false, message: "OTP ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i." });
      }

      // Ki·ªÉm tra OTP c√≥ kh·ªõp kh√¥ng
      if (storedOtp !== otp) {
          return res.status(400).json({ success: false, message: "M√£ OTP kh√¥ng ch√≠nh x√°c." });
      }

      // X√≥a OTP sau khi x√°c minh th√†nh c√¥ng (tr√°nh d√πng l·∫°i)
      await accountService.deleteOtp(input);

      return res.status(200).json({ success: true, message: "X√°c minh OTP th√†nh c√¥ng!" });

  } catch (error) {
      console.error("‚ùå L·ªói x√°c minh OTP:", error);
      return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
const updatePassword = async (req, res) => {
  try {
      const { email, newPassword } = req.body;

      console.log("üîç Nh·∫≠n y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u:", { email, newPassword });

      if (!email || !newPassword) {
          return res.status(400).json({ success: false, message: "Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u m·ªõi." });
      }

      // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
      const account = await accountService.getAccountByEmail(email);
      if (!account) {
          return res.status(404).json({ success: false, message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng." });
      }

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m√† KH√îNG m√£ h√≥a
      await accountService.updatePassword(email, newPassword);

      return res.status(200).json({ success: true, message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
  } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
      return res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
export const accountController = {
  getAccounts,
  getAccountById,
  createAccount,
  updateAccountById,
  updateAllAccounts,
  deleteAccountById,
  loginAccount,
  sendOtp,
  verifyOtp,
  updatePassword,
}
