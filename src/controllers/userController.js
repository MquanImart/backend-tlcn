import { userService } from '../services/userService.js';
import User from "../models/User.js";
import Account from "../models/Account.js";
import Hobby from "../models/Hobby.js";
const getUsers = async (req, res) => {
  try {
    const users = await userService.getUsers();
    res.status(200).json({ success: true, data: users, message: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message });
  }
};

const getUserById = async (req, res) => {
  try {
    const user = await userService.getUserById(req.params.id);
    if (!user) return res.status(404).json({ success: false, data: null, message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    res.status(200).json({ success: true, data: user, message: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message });
  }
};

const createUser = async (req, res) => {
  try {
    const newUser = await userService.createUser(req.body);
    res.status(201).json({ success: true, data: newUser, message: 'T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message });
  }
};

const updateUserById = async (req, res) => {
  try {
    const updatedUser = await userService.updateUserById(req.params.id, req.body);
    if (!updatedUser) return res.status(404).json({ success: false, data: null, message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    res.status(200).json({ success: true, data: updatedUser, message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message });
  }
};

const updateAllUsers = async (req, res) => {
  try {
    const updatedUsers = await userService.updateAllUsers(req.body);
    res.status(200).json({ success: true, data: updatedUsers, message: 'C·∫≠p nh·∫≠t t·∫•t c·∫£ ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message });
  }
};

const deleteUserById = async (req, res) => {
  try {
    const deletedUser = await userService.deleteUserById(req.params.id);
    if (!deletedUser) return res.status(404).json({ success: false, data: null, message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    res.status(200).json({ success: true, data: null, message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, data: null, message: error.message });
  }
};
const addHobbyByEmail = async (req, res) => {
  try {
      const { email, hobbies } = req.body;

      console.log("üì© Nh·∫≠n d·ªØ li·ªáu t·ª´ client:", { email, hobbies });

      // Ki·ªÉm tra ƒë·∫ßu v√†o
      if (!email || !Array.isArray(hobbies) || hobbies.length === 0) {
          return res.status(400).json({ success: false, message: "Vui l√≤ng cung c·∫•p email v√† danh s√°ch hobbies h·ª£p l·ªá." });
      }

      // T√¨m `account` theo `email`
      const account = await Account.findOne({ email });
      if (!account) {
          return res.status(404).json({ success: false, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i." });
      }

      // T√¨m `user` theo `account._id`
      const user = await User.findOne({ account: account._id });
      if (!user) {
          return res.status(404).json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
      }

      // Ki·ªÉm tra xem s·ªü th√≠ch ƒë√£ c√≥ trong database ch∆∞a
      const existingHobbies = await Hobby.find({ name: { $in: hobbies } });

      // L·ªçc ra c√°c hobby ƒë√£ t·ªìn t·∫°i
      const existingHobbyIds = existingHobbies.map(hobby => hobby._id);
      const existingNames = existingHobbies.map(hobby => hobby.name);

      // T·∫°o m·ªõi c√°c hobby ch∆∞a c√≥ trong database
      const newHobbies = hobbies
          .filter(hobby => !existingNames.includes(hobby))
          .map(name => ({ name }));

      let insertedHobbies = [];
      if (newHobbies.length > 0) {
          insertedHobbies = await Hobby.insertMany(newHobbies);
      }

      // L·∫•y danh s√°ch ID c·ªßa c√°c hobby m·ªõi th√™m
      const allHobbyIds = [...existingHobbyIds, ...insertedHobbies.map(hobby => hobby._id)];

      // Ki·ªÉm tra xem user ƒë√£ c√≥ nh·ªØng s·ªü th√≠ch n√†y ch∆∞a
      const hobbiesToAdd = allHobbyIds.filter(hobbyId => !user.hobbies.includes(hobbyId));

      if (hobbiesToAdd.length === 0) {
          return res.status(400).json({ success: false, message: "Ng∆∞·ªùi d√πng ƒë√£ c√≥ nh·ªØng s·ªü th√≠ch n√†y." });
      }

      // C·∫≠p nh·∫≠t danh s√°ch s·ªü th√≠ch c·ªßa user
      user.hobbies.push(...hobbiesToAdd);
      await user.save();

      return res.status(200).json({
          success: true,
          message: "Th√™m s·ªü th√≠ch th√†nh c√¥ng!",
          user,
      });
  } catch (error) {
      console.error("‚ùå L·ªói th√™m s·ªü th√≠ch v√†o user:", error);
      return res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
export const userController = {
  getUsers,
  getUserById,
  createUser,
  updateUserById,
  updateAllUsers,
  deleteUserById,
  addHobbyByEmail,
};
